<@page "/patient/add"
@inject PatientService PatientSvc
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Add New Patient</h3>
<hr />

@* Use EditForm for validation handling *@
<EditForm Model="@newPatient" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator /> 

    <div class="mb-3">
        <label for="firstName" class="form-label">First Name:</label>
        <InputText id="firstName" class="form-control" @bind-Value="newPatient.FirstName" />
        <ValidationMessage For="@(() => newPatient.FirstName)" /> @* display validation error for this field *@
    </div>

    <div class="mb-3">
        <label for="lastName" class="form-label">Last Name:</label>
        <InputText id="lastName" class="form-control" @bind-Value="newPatient.LastName" />
        <ValidationMessage For="@(() => newPatient.LastName)" />
    </div>

    <div class="mb-3">
        <label for="dob" class="form-label">Date of Birth:</label>
        <InputDate id="dob" class="form-control" @bind-Value="newPatient.DateOfBirth" />
        <ValidationMessage For="@(() => newPatient.DateOfBirth)" />
    </div>

    <div class="mb-3">
        <label for="gender" class="form-label">Gender:</label>
        <InputSelect id="gender" class="form-select" @bind-Value="newPatient.GenderId">
            <option value="0">-- Select Gender --</option> @* Default prompt *@
            @if (genders != null)
            {
                @foreach (var gender in genders)
                {
                    <option value="@gender.GenderId">@gender.Name</option>
                }
            }
        </InputSelect>
        <ValidationMessage For="@(() => newPatient.GenderId)" />
    </div>

    <div class="mb-3">
        <label for="phone" class="form-label">Phone Number:</label>
        <InputText id="phone" class="form-control" @bind-Value="newPatient.PhoneNumber" />
        <ValidationMessage For="@(() => newPatient.PhoneNumber)" />
    </div>

    <div class="mb-3">
        <label for="address" class="form-label">Address:</label>
        <InputTextArea id="address" class="form-control" @bind-Value="newPatient.Address" />
        <ValidationMessage For="@(() => newPatient.Address)" />
    </div>

     <div class="mb-3">
        <label for="emergName" class="form-label">Emergency Contact Name:</label>
        <InputText id="emergName" class="form-control" @bind-Value="newPatient.EmergencyContactName" />
         <ValidationMessage For="@(() => newPatient.EmergencyContactName)" />
    </div>

    <div class="mb-3">
        <label for="emergPhone" class="form-label">Emergency Contact Phone:</label>
        <InputText id="emergPhone" class="form-control" @bind-Value="newPatient.EmergencyContactPhone" />
        <ValidationMessage For="@(() => newPatient.EmergencyContactPhone)" />
    </div>

    <ValidationSummary /> 

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }

    <button type="submit" class="btn btn-primary" disabled="@isSaving"> @* disable button while saving *@
        @if (isSaving) { <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> }
        Save Patient
    </button>
    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>

</EditForm>

@code {
    // The model being created, initialized with default values
    private Patient newPatient = new Patient { DateOfBirth = DateTime.Today.AddYears(-30) }; // Initialize with a default DOB
    private List<Gender>? genders; // For dropdown
    private string? errorMessage; // To display save errors
    private bool isSaving = false; // Flag to prevent double submission

    // Load necessary data (Genders) when component initializes
    protected override async Task OnInitializedAsync()
    {
        errorMessage = null;
        try
        {
             genders = await PatientSvc.GetGenders();
        }
         catch(Exception ex)
        {
             errorMessage = $"Error loading gender options: {ex.Message}";
             Console.WriteLine($"Error loading genders: {ex}");
        }
    }


    private async Task HandleValidSubmit()
    {
        isSaving = true; 
        errorMessage = null; 
        StateHasChanged(); 

        try
        {
            await PatientSvc.AddPatientAsync(newPatient); 
            NavigationManager.NavigateTo("/patients"); 
        }
        catch (ApplicationException appEx) 
        {
             errorMessage = $"Save Error: {appEx.Message}";
        }
        catch (Exception ex) 
        {
            errorMessage = $"An unexpected error occurred: {ex.Message}";
            Console.WriteLine($"Error adding patient: {ex}"); 
        }
        finally
        {
            isSaving = false; 
             StateHasChanged(); 
        }
    }

    // navigate back to the patient list page
    private void Cancel()
    {
        NavigationManager.NavigateTo("/patients");
    }
}